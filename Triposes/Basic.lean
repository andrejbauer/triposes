import Mathlib.Order.Heyting.Basic
import Mathlib.Order.Heyting.Hom
--import Mathlib.Order.Defs.PartialOrder
import Mathlib.Order.Monotone.Basic
import Mathlib.CategoryTheory.Limits.Shapes.Pullback.CommSq
import Mathlib.CategoryTheory.Types
import Mathlib.Order.Category.HeytAlg

universe u

section Defn

class LeftAdjoint {X Y : Type u} [Preorder X] [Preorder Y] (f : X ‚Üí Y) : Type u where
  map : Y ‚Üío X
  adjTo   : ‚àÄ {y : Y} {x : X}, (map y ‚â§ x) ‚Üí (y ‚â§ f x)
  adjFrom : ‚àÄ {y : Y} {x : X}, (y ‚â§ f x) ‚Üí (map y ‚â§ x)

class RightAdjoint {X Y : Type u} [Preorder X] [Preorder Y] (f : X ‚Üí Y) : Type u where
  map : Y ‚Üío X
  adjTo   : ‚àÄ {x : X} {y : Y}, (f x ‚â§ y) ‚Üí (x ‚â§ map y)
  adjFrom : ‚àÄ {x : X} {y : Y}, (x ‚â§ map y) ‚Üí (f x ‚â§ y)

class TypeTripos : Type (u + 1) where
  obj : Type u ‚Üí HeytAlg.{u}
  --objHA : (X : Type u) ‚Üí HeytingAlgebra (obj X)
  map : {X Y : Type u} ‚Üí (f : X ‚Üí Y) ‚Üí HeytingHom (obj Y) (obj X)

  ùîº : {X Y : Type u} ‚Üí (f : X ‚Üí Y) ‚Üí LeftAdjoint (map f)
  --ùîº : {X Y : Type u} ‚Üí (f : X ‚Üí Y) ‚Üí @LeftAdjoint (obj Y) (obj X) (by infer_instance) (by infer_instance) (map f)
  ùî∏ : {X Y : Type u} ‚Üí (f : X ‚Üí Y) ‚Üí RightAdjoint (map f)

  BeckChevalley : ‚àÄ {X Y Z W : Type u} (f : X ‚Üí Y) (g : X ‚Üí Z) (h : Y ‚Üí W) (k : Z ‚Üí W), @CategoryTheory.IsPullback.{u, u+1} (Type u) CategoryTheory.types X Y Z W f g h k ‚Üí (ùî∏ f).map ‚àò map g = map h ‚àò (ùî∏ k).map

  ùïä : Type u
  œÉ : obj ùïä
  bracket : ‚àÄ {X : Type u} (œÜ : obj X), X ‚Üí ùïä
  œÉIsGeneric : ‚àÄ {X : Type u} (œÜ : obj X), œÜ = map (bracket œÜ) œÉ

def swap {X Y : Type u} : X √ó Y ‚Üí Y √ó X := fun ‚ü®x, y‚ü© => ‚ü®y, x‚ü©
def diag {X : Type u} : X ‚Üí X √ó X := fun x => ‚ü®x, x‚ü©
def proj {X Y : Type u} : X √ó Y ‚Üí Y := fun ‚ü®_, y‚ü© => y
def proj' {X Y : Type u} : X √ó Y ‚Üí X := fun ‚ü®x, _‚ü© => x
def ùî∏œÄ {P : TypeTripos} {X Y : Type u} := P.ùî∏ (P.map (@proj X Y))

def proj‚ÇÉ‚ÇÅ {X Y Z : Type u} : X √ó Y √ó Z ‚Üí Y √ó Z := fun ‚ü®_, y, z‚ü© => ‚ü®y, z‚ü©
def proj‚ÇÉ‚ÇÇ {X Y Z : Type u} : X √ó Y √ó Z ‚Üí X √ó Z := fun ‚ü®x, _, z‚ü© => ‚ü®x, z‚ü©
def proj‚ÇÉ‚ÇÉ {X Y Z : Type u} : X √ó Y √ó Z ‚Üí X √ó Y := fun ‚ü®x, y, _‚ü© => ‚ü®x, y‚ü©


end Defn

section PER

-- To ni prav, ker to ni prava interpretacija
-- class PartialEquivalenceRelation (X : Type u) (P : TypeTripos) : Type (u + 1) where
--   rel : X ‚Üí X ‚Üí P.obj X
--   sym : ‚àÄ {x y : X}, rel x y ‚â§ rel y x
--   trans : ‚àÄ {x y z : X}, rel x y ‚äì rel y z ‚â§ rel x z
variable {X : Type u} (P : TypeTripos) (rel : P.obj (X √ó X))
#check P.map proj‚ÇÉ‚ÇÉ rel

def isTrue {P : TypeTripos} {Z : Type u} (p : P.obj Z) := (P.obj Z).str.top = p
def isTrue' {P : TypeTripos} {Z : Type u} (p : P.obj Z) := (P.obj PUnit).str.top = (P.ùî∏ (fun _ => PUnit.unit)).map p

class PartialEquivalenceRelation (X : Type u) (P : TypeTripos) : Type (u + 1) where
  rel : P.obj (X √ó X)
  sym : isTrue (P.map id rel ‚á® P.map swap rel)
  trans : isTrue (P.map proj‚ÇÉ‚ÇÉ rel ‚äì P.map proj‚ÇÉ‚ÇÅ rel ‚á® P.map proj‚ÇÉ‚ÇÉ rel)

class PartialEquivalenceRelationHom {X Y : Type u} {P : TypeTripos} (relX : PartialEquivalenceRelation X P) (relY : PartialEquivalenceRelation Y P) : Type (u + 1) where
  map : P.obj (X √ó Y)
  congrDom : isTrue (P.map proj‚ÇÉ‚ÇÉ relX.rel ‚äì P.map proj‚ÇÉ‚ÇÅ map ‚á® P.map proj‚ÇÉ‚ÇÇ map)
  congrCod : isTrue (P.map proj‚ÇÉ‚ÇÉ map ‚äì P.map proj‚ÇÉ‚ÇÅ relY.rel ‚á® P.map proj‚ÇÉ‚ÇÇ map)
  unique : isTrue (P.map proj‚ÇÉ‚ÇÉ map ‚äì P.map proj‚ÇÉ‚ÇÇ map ‚á® P.map proj‚ÇÉ‚ÇÅ relY.rel)
  total : isTrue (P.map diag relX.rel ‚á® (P.ùîº proj').map map)

end PER
